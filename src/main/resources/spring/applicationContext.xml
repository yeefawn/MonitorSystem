<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 导入配置文件 -->
    <!--<context:property-placeholder location="classpath:config.properties" />-->

    <!-- 启动spring组件扫描 -->
    <context:component-scan base-package="com.yeewenfag.service" />

    <!-- 加载配置文件（可在代码中直接使用PropertyUtils.getProperty("属性名")获取属性值） -->
    <bean id="propertyConfigurer" class="com.yeewenfag.utils.property.PropertyPlaceholder" >
        <property name="locations">
            <list>
                <value>classpath*:db.properties</value>
                <value>classpath*:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- Druid 和 Spring 关联监控配置 start-->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.yeewenfag.service.impl.*</value>
                <!--如果使用的是 hibernate 则这里也要扫描路径，但是 mybatis 不需要-->
                <!--<value>com.youmeek.ssm.module.*.dao.*</value>-->
            </list>
        </property>
    </bean>

    <aop:config proxy-target-class="true">
        <!-- pointcut-ref="druid-stat-pointcut" 这个报红没事-->
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <!-- Druid 和 Spring 关联监控配置 end-->

    <!-- 开启定时任务组件扫描 -->
    <task:annotation-driven />

    <!-- 开启Spring AOP注解扫描 -->
    <aop:aspectj-autoproxy />


    <!--配置Spring mail服务 start-->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}" />
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.pasword}" />
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.port">${mail.smtp.port}</prop>
                <prop key="mail.smtps.ssl.enable" >${mail.smtps.ssl.enable}</prop>
                <prop key="mail.smtps.ssl.checkserveridentity" >${mail.smtps.ssl.checkserveridentity}</prop>
                <prop key="mail.smtps.ssl.trust" >${mail.smtps.ssl.trust}</prop>
            </props>
        </property>
    </bean>
    <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
        <!-- 发件人email -->
        <property name="from" value="${mail.sender}" />
    </bean>

    <bean id="mailUtil" class="com.yeewenfag.utils.MailUtil" />
    <!--配置Spring mail服务 end-->

    <!-- 配置HttpClient工具类 start -->
    <!--创建httpclient的连接池 -->
    <bean id="httpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
          destroy-method="shutdown">
        <!-- 设置最大连接数 -->
        <property name="maxTotal" value="${http.maxTotal}" />
        <!-- 设置每个主机的并发数 -->
        <property name="defaultMaxPerRoute" value="${http.defaultMaxPerRoute}" />
    </bean>

    <!-- 创建httpClient对象 -->
    <!-- httpClient是由HttpClientBuilder通过build方法创建，这个可以设置连接池 -->
    <!-- 1.创建HttpClientBuilder -->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">
        <!--设置连接池 -->
        <property name="connectionManager" ref="httpClientConnectionManager"></property>
    </bean>
    <!-- 2.创建httpClient -->
    <!-- 通过httpClientBulider得到httpClient对象，并且设置httpClient为多利模式 -->
    <!-- 要保证httpClient为多利，以为每次都是新的http请求 -->
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient"
          factory-bean="httpClientBuilder" factory-method="build" scope="prototype" />

    <!-- 构造请求参数 -->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <!-- 创建连接的最长时间 -->
        <property name="connectTimeout" value="${http.connectTimeout}" />
        <!-- 从连接池中获取到连接的最长时间 -->
        <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}" />
        <!-- 数据传输的最长时间 -->
        <property name="socketTimeout" value="${http.socketTimeout}" />
        <!-- 提交请求前测试连接是否可用 -->
        <property name="staleConnectionCheckEnabled" value="${http.staleConnectionCheckEnabled}" />
    </bean>
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig"
          factory-bean="requestConfigBuilder" factory-method="build" />

    <bean id="httpUtil" class="com.yeewenfag.utils.HttpUtil" />

    <!-- 配置HttpClient工具类 end -->
</beans>